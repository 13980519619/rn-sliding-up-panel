{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started React Native draggable sliding up panel purly implemented in Javascript. Inspired by AndroidSlidingUpPanel . Works nicely on any platforms. Demo: Expo | web Dependencies React = 16. rn-sliding-up-panel is built with React Native 0.47 but it may work with older versions since this is pure Javascript. Installation npm install --save rn-sliding-up-panel or if you are using yarn : yarn add rn-sliding-up-panel Example import React from react ; import { View , Button , Text } from react-native ; import SlidingUpPanel from rn-sliding-up-panel ; const styles = { container : { flex : 1 , backgroundColor : white , alignItems : center , justifyContent : center } } class MyComponent extends React . Component { render () { return ( View style = { styles . container } Button title = Show panel onPress = {() = this . _panel . show ()} / SlidingUpPanel ref = { c = this . _panel = c } View style = { styles . container } Text Here is the content inside panel / Text Button title = Hide onPress = {() = this . _panel . hide ()} / / View / SlidingUpPanel / View ) } } More: ScrollView insides the panel Bottom sheet Props Property Type Description animatedValue Animated.Value An Animated.Value number between the top and bottom of draggable range. This number represents the position of the panel. If you update this prop, the panel will correspondingly update to the frame at that progress value. Default to Animated.Value(0) (Hidden at bottom of screen). draggableRange {top: number, bottom: number} Boundary limits for draggable area. top default to visible height of device, bottom default to 0. snappingPoints number[] Must be an incremental array of number and all values must be within the top bottom of draggableRange. minimumVelocityThreshold number Velocity threshold in pixel/s to trigger the fling animation after you release finger. Default is 0.1. minimumDistanceThreshold number Distance threshold in pixel (virtual, not physical) to trigger the fling animation after you release finger. Default is 0.24. height number Height of panel. Typically this should equal to the top value of draggablerange. friction number Determines how quickly the fling animation settles down and stops. The higher the value, the faster the velocity decreases. Default is 0.998. backdropOpacity number Opacity of the backdrop when the panel is active. Default is 0.75. containerStyle Style Custom style for the container. backdropStyle Style Custom style for the backdrop. showBackdrop boolean Controls the visibility of backdrop. Default true . allowMomentum boolean If false , panel will not continue to move when you release your finger. allowDragging boolean Default true . Setting this to false to disable dragging. onBackButtonPress () = boolean By default when you press back button (Android) the panel will be closed (Move to bottom position of draggableRange ). Implement this function if you want to custom the behavior. Returning true means the event has been handled. onDragStart (position: number, gestureState: GestureState) = void Called when the panel is about to start dragging. onDragEnd (position: number: gestureState: GestureState) = void Called when you release your finger. onMomentumDragStart (position: number) = void Called when the momentum drag starts. Works exactly the same way of ScrollView#onMomentumScrollBegin . onMomentumDragEnd (position: number) = void Called when the momentum drag ends. Works exactly the same way of ScrollView#onMomentumScrollEnd . children React.Element | Function Accepts passing a function as component. Invoked with dragHandlers (that can be passed into another View like this View {...dragHandlers} ) when the panel is mounted. Useful when you want only a part of your content becomes the drag handler. A gestureState (is forwarded from PanResponder' s callbacks) object has the following: stateID - ID of the gestureState - persisted as long as there at least one touch on screen moveX - the latest screen coordinates of the recently-moved touch moveY - the latest screen coordinates of the recently-moved touch x0 - the screen coordinates of the responder grant y0 - the screen coordinates of the responder grant dx - accumulated distance of the gesture since the touch started dy - accumulated distance of the gesture since the touch started vx - current velocity of the gesture vy - current velocity of the gesture numberActiveTouches - Number of touches currently on screen Notes : - Except children, all other properties are optional. - Call show() or hide() won't trigger onMomentum* events. - If snappingPoints is set, the panel will always either snaps to top, bottom or a closest possible value of it. Methods show(value?: number | Object): Programmatically move panel to a given value. Accepts a number or an object that may have the following options: toValue : The value that the panel will move to. velocity : Initial velocity of the animation. Note: Calling show() without any parameter will showmove the panel to top position (of draggableRange). hide(): Move the panel to the bottom position of draggable range. Note: This method is triggered if you touch the backdrop (If it's visible). scrollIntoView(node: number): Typically you don't need to use this method, But if an element is stuck under the keyboard or out of view, you can use this ensure it is visible within the viewable area. Note: The element must be in the subtree of the panel component. Node can be obtained by using findNodeHandle .","title":"Getting started"},{"location":"#getting-started","text":"React Native draggable sliding up panel purly implemented in Javascript. Inspired by AndroidSlidingUpPanel . Works nicely on any platforms. Demo: Expo | web","title":"Getting started"},{"location":"#dependencies","text":"React = 16. rn-sliding-up-panel is built with React Native 0.47 but it may work with older versions since this is pure Javascript.","title":"Dependencies"},{"location":"#installation","text":"npm install --save rn-sliding-up-panel or if you are using yarn : yarn add rn-sliding-up-panel","title":"Installation"},{"location":"#example","text":"import React from react ; import { View , Button , Text } from react-native ; import SlidingUpPanel from rn-sliding-up-panel ; const styles = { container : { flex : 1 , backgroundColor : white , alignItems : center , justifyContent : center } } class MyComponent extends React . Component { render () { return ( View style = { styles . container } Button title = Show panel onPress = {() = this . _panel . show ()} / SlidingUpPanel ref = { c = this . _panel = c } View style = { styles . container } Text Here is the content inside panel / Text Button title = Hide onPress = {() = this . _panel . hide ()} / / View / SlidingUpPanel / View ) } } More: ScrollView insides the panel Bottom sheet","title":"Example"},{"location":"#props","text":"Property Type Description animatedValue Animated.Value An Animated.Value number between the top and bottom of draggable range. This number represents the position of the panel. If you update this prop, the panel will correspondingly update to the frame at that progress value. Default to Animated.Value(0) (Hidden at bottom of screen). draggableRange {top: number, bottom: number} Boundary limits for draggable area. top default to visible height of device, bottom default to 0. snappingPoints number[] Must be an incremental array of number and all values must be within the top bottom of draggableRange. minimumVelocityThreshold number Velocity threshold in pixel/s to trigger the fling animation after you release finger. Default is 0.1. minimumDistanceThreshold number Distance threshold in pixel (virtual, not physical) to trigger the fling animation after you release finger. Default is 0.24. height number Height of panel. Typically this should equal to the top value of draggablerange. friction number Determines how quickly the fling animation settles down and stops. The higher the value, the faster the velocity decreases. Default is 0.998. backdropOpacity number Opacity of the backdrop when the panel is active. Default is 0.75. containerStyle Style Custom style for the container. backdropStyle Style Custom style for the backdrop. showBackdrop boolean Controls the visibility of backdrop. Default true . allowMomentum boolean If false , panel will not continue to move when you release your finger. allowDragging boolean Default true . Setting this to false to disable dragging. onBackButtonPress () = boolean By default when you press back button (Android) the panel will be closed (Move to bottom position of draggableRange ). Implement this function if you want to custom the behavior. Returning true means the event has been handled. onDragStart (position: number, gestureState: GestureState) = void Called when the panel is about to start dragging. onDragEnd (position: number: gestureState: GestureState) = void Called when you release your finger. onMomentumDragStart (position: number) = void Called when the momentum drag starts. Works exactly the same way of ScrollView#onMomentumScrollBegin . onMomentumDragEnd (position: number) = void Called when the momentum drag ends. Works exactly the same way of ScrollView#onMomentumScrollEnd . children React.Element | Function Accepts passing a function as component. Invoked with dragHandlers (that can be passed into another View like this View {...dragHandlers} ) when the panel is mounted. Useful when you want only a part of your content becomes the drag handler. A gestureState (is forwarded from PanResponder' s callbacks) object has the following: stateID - ID of the gestureState - persisted as long as there at least one touch on screen moveX - the latest screen coordinates of the recently-moved touch moveY - the latest screen coordinates of the recently-moved touch x0 - the screen coordinates of the responder grant y0 - the screen coordinates of the responder grant dx - accumulated distance of the gesture since the touch started dy - accumulated distance of the gesture since the touch started vx - current velocity of the gesture vy - current velocity of the gesture numberActiveTouches - Number of touches currently on screen Notes : - Except children, all other properties are optional. - Call show() or hide() won't trigger onMomentum* events. - If snappingPoints is set, the panel will always either snaps to top, bottom or a closest possible value of it.","title":"Props"},{"location":"#methods","text":"","title":"Methods"},{"location":"#showvalue-number-object","text":"Programmatically move panel to a given value. Accepts a number or an object that may have the following options: toValue : The value that the panel will move to. velocity : Initial velocity of the animation. Note: Calling show() without any parameter will showmove the panel to top position (of draggableRange).","title":"show(value?: number | Object):"},{"location":"#hide","text":"Move the panel to the bottom position of draggable range. Note: This method is triggered if you touch the backdrop (If it's visible).","title":"hide():"},{"location":"#scrollintoviewnode-number","text":"Typically you don't need to use this method, But if an element is stuck under the keyboard or out of view, you can use this ensure it is visible within the viewable area. Note: The element must be in the subtree of the panel component. Node can be obtained by using findNodeHandle .","title":"scrollIntoView(node: number):"},{"location":"panel-position/","text":"Determine the position of panel The panel provides a various ways to get its position during the transition or when it's stopped. You can use onDrag* or onMomentum* events to listen to the animated value. Those events also provide you the gesture state. SlidingUpPanel onDragStart = {( value , gestureState ) = {}} onDragEnd = {( value , gestureState ) = {}} onMomentumDragStart = {( value , gestureState ) = {}} onMomentumDragEnd = {( value , gestureState ) = {}} // Other props... / On the other hand, can add listener directly to the animated value. This gives you more control and flexibility. import { Animated } from react-native import SlidingUpPanel from rn-sliding-up-panel class BottomSheet extends Component { animatedValue = new Animated . Value ( 0 ) // componenDidMount () { this . listener = this . animatedValue . addListener ( this . onAnimatedValueChange ) } componentWillUnmount () { this . animatedValue . removeListener ( this . listener ) } onAnimatedValueChange ({ value }) { // Fired when the panel is moving } render () { return ( SlidingUpPanel animatedValue = { this . animatedValue } // Other props... / ) } }","title":"Determine the position of panel"},{"location":"panel-position/#determine-the-position-of-panel","text":"The panel provides a various ways to get its position during the transition or when it's stopped. You can use onDrag* or onMomentum* events to listen to the animated value. Those events also provide you the gesture state. SlidingUpPanel onDragStart = {( value , gestureState ) = {}} onDragEnd = {( value , gestureState ) = {}} onMomentumDragStart = {( value , gestureState ) = {}} onMomentumDragEnd = {( value , gestureState ) = {}} // Other props... / On the other hand, can add listener directly to the animated value. This gives you more control and flexibility. import { Animated } from react-native import SlidingUpPanel from rn-sliding-up-panel class BottomSheet extends Component { animatedValue = new Animated . Value ( 0 ) // componenDidMount () { this . listener = this . animatedValue . addListener ( this . onAnimatedValueChange ) } componentWillUnmount () { this . animatedValue . removeListener ( this . listener ) } onAnimatedValueChange ({ value }) { // Fired when the panel is moving } render () { return ( SlidingUpPanel animatedValue = { this . animatedValue } // Other props... / ) } }","title":"Determine the position of panel"},{"location":"performance/","text":"Common sources of performance problems Running in development mode Many people have noticed that performance of the panel reduced sinificantly if development mode ( dev=true ) is turned on. This is unavoidable because the entire animation is running on the Javascript thread. A lot more work needs to be done to provide you good warning and error messges. So make sure you are not using Chrome debugger or devtool when testing animations. If you want to view your data while the panel is moving, there are various ways . Doing expensive operations while the panel is animating Because the animation is in the Javascript thread, when you move the panel or fling it: Each frame during the transition, the JavaScript thread needs to send a new y-offset to the main thread. If the JavaScript thread is locked up, it cannot do this and so no update occurs on that frame and the animation stutters. To avoid this, I recommend to use InteractionManager to schedule long-running works to start after the interaction/animation have completed. this . panel . show () // Or hide() InteractionManager . runAfterInteractions (() = { // ...long-running synchronous task... }); Touchables or inputs are not very responsive Sometimes if we do an action while the panel are moving, we won't see the effect of onPress , onFocus ... immediately. If our action does a lot of work and results in a few frames dropped, this may occur. A workaround is to wrap the action in a setTimeout or requestAnimationFrame : handleOnPress () { setTimeout (() = { // Our action... }) }","title":"Common sources of performance problems"},{"location":"performance/#common-sources-of-performance-problems","text":"","title":"Common sources of performance problems"},{"location":"performance/#running-in-development-mode","text":"Many people have noticed that performance of the panel reduced sinificantly if development mode ( dev=true ) is turned on. This is unavoidable because the entire animation is running on the Javascript thread. A lot more work needs to be done to provide you good warning and error messges. So make sure you are not using Chrome debugger or devtool when testing animations. If you want to view your data while the panel is moving, there are various ways .","title":"Running in development mode"},{"location":"performance/#doing-expensive-operations-while-the-panel-is-animating","text":"Because the animation is in the Javascript thread, when you move the panel or fling it: Each frame during the transition, the JavaScript thread needs to send a new y-offset to the main thread. If the JavaScript thread is locked up, it cannot do this and so no update occurs on that frame and the animation stutters. To avoid this, I recommend to use InteractionManager to schedule long-running works to start after the interaction/animation have completed. this . panel . show () // Or hide() InteractionManager . runAfterInteractions (() = { // ...long-running synchronous task... });","title":"Doing expensive operations while the panel is animating"},{"location":"performance/#touchables-or-inputs-are-not-very-responsive","text":"Sometimes if we do an action while the panel are moving, we won't see the effect of onPress , onFocus ... immediately. If our action does a lot of work and results in a few frames dropped, this may occur. A workaround is to wrap the action in a setTimeout or requestAnimationFrame : handleOnPress () { setTimeout (() = { // Our action... }) }","title":"Touchables or inputs are not very responsive"},{"location":"safearea-view/","text":"Using with SafeAreaView I suggest to use the react-native-safe-area-view because the build-in SafeAreaView component of React Native is only applicable to iOS devices with iOS version 11 or later. Example import SafeAreaView from react-native-safe-are-view import SlidingUpPanel from rn-sliding-up-panel // Your render function SlidingUpPanel SafeAreaView // Content... / SafeAreaView / SlidingUpPanel Caculate the draggable range If you need the panel stays inside the safe area, not just the content, you have to calculate draggable range of the panel, minus the top bottom. import { getInset } from react-native-safe-area-view ; import SlidingUpPanel from rn-sliding-up-panel const { width , height } = Dimensions . get ( window ); const landScape = width height ; const topPadding = getInset ( top , landScape ); const bottomPadding = getInset ( bottom , landScape ); SlidingUpPanel draggableRange = {{ top : height - topPadding - bottomPadding , bottom : 0 }} // Your content... / SlidingUpPanel","title":"Using with SafeAreaView"},{"location":"safearea-view/#using-with-safeareaview","text":"I suggest to use the react-native-safe-area-view because the build-in SafeAreaView component of React Native is only applicable to iOS devices with iOS version 11 or later.","title":"Using with SafeAreaView"},{"location":"safearea-view/#example","text":"import SafeAreaView from react-native-safe-are-view import SlidingUpPanel from rn-sliding-up-panel // Your render function SlidingUpPanel SafeAreaView // Content... / SafeAreaView / SlidingUpPanel","title":"Example"},{"location":"safearea-view/#caculate-the-draggable-range","text":"If you need the panel stays inside the safe area, not just the content, you have to calculate draggable range of the panel, minus the top bottom. import { getInset } from react-native-safe-area-view ; import SlidingUpPanel from rn-sliding-up-panel const { width , height } = Dimensions . get ( window ); const landScape = width height ; const topPadding = getInset ( top , landScape ); const bottomPadding = getInset ( bottom , landScape ); SlidingUpPanel draggableRange = {{ top : height - topPadding - bottomPadding , bottom : 0 }} // Your content... / SlidingUpPanel","title":"Caculate the draggable range"}]}